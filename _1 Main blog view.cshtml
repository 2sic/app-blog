<link rel="stylesheet" data-enableoptimizations="true" href="@App.Path/assets/style.css" />
@{
    // get all posts as delived from the standard query
	var postsToShow = AsDynamic(Data["Default"]);
    var cat = AsDynamic(Data["Category"]).FirstOrDefault(); // get category if, if a category is selected
    
	// only apply this filter for non-editors
	if (!Permissions.UserMayEditContent) {
		postsToShow = postsToShow.Where(p => p.PublicationMoment <= DateTime.Now);
	}
}

    
@* optionaly show category header *@
@if(cat != null) {
    <div>
        <h1>@cat.Name</h1>
        @Html.Raw(cat.Description)
    </div>
}
    
<div class="sc-element">
    @* toolbar for add / manage posts *@
	@Edit.Toolbar(toolbar: new object[] { 
	    new { 
            command = new { 
    			action = "new", 
    			contentType = "BlogPost"
		    } 
		},
		new { 
            command = new { 
                action = "contentitems", 
                contentType = "BlogPost"
            },
            showCondition = true
		}
	}, settings: new { hover="left", show = "hover" })

    @* toolbar to manage list/view settings *@
    @Edit.Toolbar(ListContent)


    <div class="app-blog">
    	@* the posts *@
    	@foreach(var post in postsToShow)
    	{
    		@RenderPage("_list-item.cshtml", new { Post = post })
    	}
    
    	@* Paging Bar *@
    	@RenderPage("_pager.cshtml")
    </div>

</div>


@functions{
    /// <summary>
    /// Populate the search - ensure that each entity has an own url/page
    /// </summary>
    /// <param name="searchInfos"></param>
    /// <param name="moduleInfo"></param>
    /// <param name="startDate"></param>
    public override void CustomizeSearch(Dictionary<string, List<ToSic.SexyContent.Search.ISearchInfo>> searchInfos, DotNetNuke.Entities.Modules.ModuleInfo moduleInfo, DateTime startDate)
    {
         foreach (var si in searchInfos["SearchIndex"])
		{
			si.QueryString = "post=" + AsDynamic(si.Entity).UrlKey;
		}
    }
}