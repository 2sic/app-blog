@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade;
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;
@using ToSic.Sxc.Search;
@using ToSic.Eav.Run;

@*
  Case #1: Bootstrap 3 - read the readme.md section "CSS Framework Detection"
*@
@if(Connect.Koi.Koi.Is("bs3")) {
  @RenderPage("bs3/_List.cshtml")
  return;
}
@*
  Case #2: Bootstrap 4 or Unknown CSS Framework
*@

@RenderPage("shared/_Assets.cshtml", new {scripts = true})

@{
  var parts = CreateInstance("shared/_Parts.cshtml");

  @*
    Get all posts if user is admin and only publicated ones if visitor
    FIXME: As soon as Time Comparison is fixed in Query Desginer, outsource logic
  *@
  var posts = Edit.Enabled
    ? AsList(Data["Posts"])
    : AsList(Data["Posts"]).Where(p => p.PublicationMoment.CompareTo(DateTime.Now) <= 0);

  var viewConfiguration = Content;
  var filteredTag = AsList(Data["Tag"]).FirstOrDefault();
  var filteredAuthor = AsList(Data["Author"]).FirstOrDefault();
  var filteredCategory = AsList(Data["Category"]).FirstOrDefault();
}

@* Show Toolbar Menu if admin *@
@if(Edit.Enabled) {
  @parts.AdminToolbarMenu()
  @parts.DetailsPageConfigWarning()
}

<section class="app-blog">
  @* Show information about the applied filter *@
  @parts.FilterInformationHeader(filteredCategory, filteredTag, filteredAuthor, viewConfiguration)

  <div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-8 col-xl-8">
      @* List the posts *@
      @parts.ListPostsSingleCol(posts, filteredCategory, filteredTag, filteredAuthor)

      @* Show pagination if configured *@
      @if (viewConfiguration.ShowPagination) {
        var paging = CreateInstance("shared/_List Paging.cshtml");
        var pages = AsList(Data["Paging"]).FirstOrDefault();
        @paging.Paging(pages, filteredCategory, filteredTag, filteredAuthor)
      }
    </div>

    @* Category sidebar *@
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-4 col-xl-4">
      <aside>
        @parts.CategorySidebar(filteredCategory, desktopSidebar: true)

        @*only show on mobile view*@
        @parts.CategorySidebar(filteredCategory)
      </aside>
    </div>
  </div>
</section>

@functions{
  /// <summary>
  /// Populate the search - ensure that each entity has an own url/page
  /// </summary>

  public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) {
    foreach (var si in searchInfos["SearchIndex"]) {
      si.QueryString = "post=" + AsDynamic(si.Entity).UrlKey;
    }

    // Remove not needed streams
    var keys = searchInfos.Keys.ToList();
    foreach(var key in keys) {
      if (key != "SearchIndex") {
        searchInfos.Remove(key);
      }
    }
  }
}