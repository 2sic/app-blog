@inherits Custom.Hybrid.RazorTyped
@{
  /** Part List Paging - Show a pager (if activated) **/

  // Paging information is provided by the Query in the "Paging" stream
  var pagingInfo = AsItem(MyData["Paging"]);
  var current = pagingInfo.Int("PageNumber");
  var max = pagingInfo.Int("PageCount");

  // Stop here if we dont' have pages to show
  if (max <= 1) {  return; }

  // Prepare basic checks
  var enablePrev = current > 1;
  var enableNext = current < max;
}
<nav>
  <ul class="pagination justify-content-center">
    @* Show previous button *@
    <li class='page-item @(enablePrev ? "" : "disabled")' aria-hidden="true">
      <a class="page-link" href='@LinkToPage(current - 1, enablePrev)'>@App.Resources.String("PagePrevious")</a>
    </li>

    @* Show button for every page *@
    @for (int i = 1; i <= max; i++) {
      <li class='page-item @(i == current ? "active" : "")'>
        <a class="page-link" href='@LinkToPage(i)'>@i</a>
      </li>
    }

    @* Show next button *@
    <li class='page-item @(enableNext ? "" : "disabled")' aria-hidden="true">
      <a class="page-link" href='@LinkToPage(current + 1, enableNext)'>@App.Resources.String("PageNext")</a>
    </li>
  </ul>
</nav>

@functions {
  /// <summary>
  /// Generate a paging-link, preserving current filter parameters
  /// </summary>
  public object LinkToPage(int pageNumber, bool enabled = true) {
    // If not enabled we must make sure we don't generate links for Google which shouldn't exist
    // For example next-buttons going to pages which is past the last page
    if (!enabled) {
      return Link.To();
    }

    // Create page=X parameter
    // Note: We should never have a page=1 parameter, otherwise two different links exist for page 1
    var newParams = pageNumber <= 1
      ? MyPage.Parameters.Remove("page")
      : MyPage.Parameters.Set("page", pageNumber.ToString());
    return Link.To(parameters: newParams); 
  }
}