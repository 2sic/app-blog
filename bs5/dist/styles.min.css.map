{"version":3,"file":"styles.min.css","mappings":"AAAA;;;;CAUA,CCPM,yEACE,iFAKN,gCACE,kBAEA,uCACE,kBACA,gBACA,4CAEA,+CACE,wEAGF,2CACE,sDACA,2BAKF,sCACE,uCASE,6DACE,sBAMF,+DACE,WAMJ,4CACE,gBAMR,cACE,iCAGF,cACE,kEAKE,kDACE,eAGF,6DACE,eACA,qBACA,cACA,kBACA,WAEF,yDACE,WAMJ,kDACE,eAGF,iEACE,eACA,qEACE,gBACA,qEAGF,mEACE,eAEF,iFACE,YAMN,oCACE,uEACA,gBAEA,wFAEE,cACA,eACA,gBCrDF,yBDiDA,wFAOI,iBAGF,4FACE,aACA,mBACA,iBACA,8EACA,qBAEA,0GACE,gBACA,eACA,iCACA,6DAGF,wGACE,qBAEA,sHACE,8EAIJ,0GACE,cACA,gBAGF,oGACE,WAMJ,gDACE,mBAEA,uDACE,YACA,iBAGF,oDACE,8EAMJ,4CACE,2BAEA,mDACE,YACA,gBAGF,gDACE,6EAOV,mBACE,gBACA,UACA,YACA,eAEA,+BACE,WACA,YACA,aACA,mBACA,uBAGF,sBACE,qBACA,UAEA,yBACE,YAEA,oCACE,QAUF,8CACE,gBACA,gFACA,sCACA,6QAIE,mEAEF,6EACE,+EACA,8EAEF,wEAGE,2C","sources":["webpack://app-blog/./bs5/styles/bs5.scss","webpack://app-blog/./bs5/styles/_style.scss","webpack://app-blog/./node_modules/bs5/scss/mixins/_breakpoints.scss"],"sourcesContent":["//\r\n// This SCSS generates the css file for bootstrap 4 themes\r\n// To regenerate the SCSS using your variables (custom colors, etc.)\r\n// update the reference to your _variables.scss of your skin\r\n// and re-run the following npm\r\n// npm run start-bs4\r\n//\r\n\r\n// the following comment is multi-line and will be included in the final CSS\r\n// which helps users understand where it comes from\r\n/*!\r\n * This file was auto-generated using SASS\r\n * You can manually modify it - but usually you will want to \r\n * Re-generate it using the SASS variables of your theme\r\n*/\r\n\r\n@import \"../../node_modules/bs5/scss/_functions\";\r\n\r\n// Choose which variables file you want to use\r\n// Either the one from the skin. To use the skin variables, adjust the path as needed\r\n// Or the one on this app - to only make changes here\r\n// @import \"../../../_default/Skins/2sxcBootstrap-B4/src/scss/_variables.scss\";\r\n@import \"../../node_modules/bs5/scss/mixins/_breakpoints.scss\";\r\n\r\n@import \"_variables.scss\";\r\n\r\n// Now the standard bootstrap functionality\r\n// It will use our variables\r\n@import \"../../node_modules/bs5/scss/variables\";\r\n\r\n//\r\n// This SCSS generates the css for the general styles\r\n//\r\n// It is used by all CSS generators (Bootstrap3/4, etc.)\r\n// To keep things simple, it uses the standard variables of\r\n// bootstrap 4 conventions.\r\n//\r\n\r\n@import \"_style.scss\";          // General CSS stuff for everything",".app-blog5 {\r\n  &.app-blog5-post-detail {\r\n    .app-blog5-post-content {\r\n      p:first-of-type {\r\n        margin-bottom: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) * 1.5);\r\n      }\r\n    }\r\n  }\r\n\r\n  .app-blog5-list-item {\r\n    position: relative;\r\n\r\n    figure {\r\n      position: relative;\r\n      overflow: hidden;    \r\n      transition: background-color 0.3s ease-in-out;\r\n\r\n      picture {\r\n        background-color: var(--bs-primary, var(--bs-primary-fallback-app-blog));\r\n      }\r\n\r\n      img {\r\n        transition: transform .5s ease, opacity 0.3s ease-in-out;\r\n        backface-visibility: hidden;\r\n      }\r\n    }\r\n\r\n    a {\r\n      svg {\r\n        transition: margin-left .3s ease-in-out;\r\n      }\r\n    }\r\n\r\n    &:hover {\r\n      figure {\r\n        // https://w3bits.com/css-image-hover-zoom/\r\n        // https://w3bits.com/labs/css-image-hover-zoom/ \r\n        &.effect-zoom {\r\n          img {\r\n            transform: scale(1.05);\r\n          }\r\n        }\r\n    \r\n        /* Effects for Mouse-Over */\r\n        &.effect-darken {\r\n          img {\r\n            opacity: 0.8;\r\n          }\r\n        }\r\n      }\r\n\r\n      a {\r\n        svg {          \r\n          margin-left: 8px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  h2 {\r\n    transition: color 0.3s ease-in-out;\r\n  }\r\n\r\n  hr {\r\n    margin: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) 0;\r\n  }\r\n\r\n  .app-blog5-post-header {\r\n    .post-meta {\r\n      time {\r\n        font-size: 13px;\r\n      }\r\n\r\n      a.post-category {\r\n        font-size: 13px;\r\n        display: inline-block;\r\n        padding: 0 5px;\r\n        position: relative;\r\n        z-index: 10;\r\n      }\r\n      .author-img{\r\n        width: 40px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .app-blog5-post-footer {\r\n    .app-blog5-tags {\r\n      font-size: 13px;\r\n    }\r\n\r\n    .app-blog5-post-author-details {\r\n      font-size: 13px;\r\n      img {\r\n        max-width: 100px;\r\n        margin-left: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog));\r\n      }\r\n\r\n      p {\r\n        font-size: 13px;\r\n      }\r\n      .author-picture{\r\n        width: 100px;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Previous and next article links\r\n  .app-blog5-article-links {\r\n    margin-bottom: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog));\r\n    overflow: hidden;\r\n\r\n    .previous,\r\n    .next {\r\n      max-width: 48%;\r\n      font-size: 13px;\r\n      font-weight: 700;\r\n\r\n      @include media-breakpoint-up(sm) {\r\n        max-width: 300px;\r\n      }\r\n\r\n      a {\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: right;\r\n        color: var(--bs-body-color, var(--bs-body-color-fallback-app-blog)) !important;\r\n        text-decoration: none;\r\n\r\n        &:before {\r\n          font-weight: 300;\r\n          font-size: 50px;\r\n          transition: color 0.3s ease-in-out;\r\n          color: var(--bs-primary, var(--bs-primary-fallback-app-blog));\r\n        }\r\n\r\n        &:hover {\r\n          text-decoration: none;\r\n        \r\n          &:before {\r\n            color: var(--bs-body-color, var(--bs-body-color-fallback-app-blog)) !important;\r\n          }\r\n        }\r\n\r\n        strong {\r\n          display: block;\r\n          font-weight: 500;\r\n        }\r\n\r\n        img {\r\n          width: 70px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .previous {\r\n      a {\r\n        flex-direction: row;\r\n\r\n        &:before {\r\n          content: \"‹\";\r\n          margin-right: 5px;\r\n        }\r\n\r\n        img {\r\n          margin-right: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) / 3);\r\n        }\r\n      }\r\n    }\r\n\r\n    .next {\r\n      a {\r\n        flex-direction: row-reverse;\r\n\r\n        &:before {\r\n          content: \"›\";\r\n          margin-left: 5px;\r\n        }\r\n\r\n        img {\r\n          margin-left: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) / 3);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.app-blog5-sidebar {\r\n  position: sticky;\r\n  top: 145px;\r\n  padding: 0px;\r\n  min-width: 100%;\r\n\r\n  .rss-button {\r\n    width: 30px;\r\n    height:30px;\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n\r\n    li {\r\n      padding: 5px;\r\n\r\n      span.badge {\r\n        top: 1px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Styling for post list items in va-layout-full\r\nbody.va-layout-full {\r\n  section {\r\n    &.app-blog5 {\r\n      article {\r\n        background: #fff;\r\n        padding-bottom: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) / 2);\r\n        transition: box-shadow 0.3s ease-in-out;\r\n        .app-blog5-post-header,\r\n        .app-blog5-post-content,\r\n        .app-blog5-post-footer,\r\n        #disqus_thread {\r\n          padding: 0 var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog));\r\n        }\r\n        .app-blog5-post-header picture {\r\n          margin-right: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) * -1);\r\n          margin-left: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-blog)) * -1);\r\n        }\r\n        &.app-blog5-list-item:hover {\r\n          -webkit-box-shadow: 0px 0px 20px 5px rgba(0, 0, 0, 0.2);\r\n          -moz-box-shadow: 0px 0px 20px 5px rgba(0, 0, 0, 0.2);\r\n          box-shadow: 0px 0px 20px 5px rgba(0, 0, 0, 0.2);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}