@using System.Web.UI.HtmlControls
@using System.Text.RegularExpressions



<link rel="stylesheet" data-enableoptimizations="true" href="@App.Path/assets/style.css" />
@{	var lib = CreateInstance("_library.cshtml"); }
@{



	var post = AsDynamic(Data["Default"]).First();
    var author = (post.Author.Count > 0) ? post.Author[0] : lib.unknownAuthor;

	
	// Meta Stuff, Page Title
	var pageHandler = HttpContext.Current.Handler as Page;
	var tp = (DotNetNuke.Framework.CDefault)pageHandler;
	var isHttpRequest = pageHandler != null && tp != null;
	var imgUrl = post.Image;
	var niceTeaser = Regex.Replace(post.Teaser, "<[^>]*>", " ", RegexOptions.IgnoreCase).Trim();
	niceTeaser = Regex.Replace(niceTeaser, "\\s+", " ");
	var imageHeight = (post.ImageSquare != true ? "500" : "300");
	var imageWidth = (post.ImageSquare != true ? "1000" : "300");

	// only add meta-tags if it's rendered as page - not when the search-index is accessing the template
	if (isHttpRequest)
	{
		var MetaDescription = String.IsNullOrEmpty(post.MetaDescription)
			? post.MetaDescription
			: post.Teaser;

		tp.Description = MetaDescription;
		var metaDescription = (HtmlMeta)pageHandler.FindControl("metaDescription");
		metaDescription.Visible = true;
		metaDescription.Content = HttpUtility.HtmlAttributeEncode(MetaDescription);

		pageHandler.Title = String.IsNullOrEmpty(post.MetaTitle) 
			? post.MetaTitle
			: post.Title;

		var teaser = !String.IsNullOrEmpty(post.SharingDescription) ? post.SharingDescription : niceTeaser ;

		// define image url based on square or not
		// also adds full domain, because this way it will work when sharing
		if(!String.IsNullOrEmpty(imgUrl)) {
			imgUrl = Request.Url.Scheme + "://" + Request.Url.Host 
				+ imgUrl.ToLower() 
					+ "?w=" + imageWidth + "&amp;h=" + imageHeight 
					+ "&amp;mode=max&amp;scale=both";

			imgUrl = Uri.EscapeUriString(imgUrl);				
		}

		lib.AddMeta("og:type", "article");
		lib.AddMeta("og:title", post.Title);
		lib.AddMeta("og:site_name", App.Settings.Title);
		lib.AddMeta("og:url", @Link.To(parameters: "post=" + post.UrlKey));
		lib.AddMeta("og:description", teaser );
		lib.AddMeta("og:image", imgUrl);
		lib.AddMeta("og:image:width", imageWidth);
		lib.AddMeta("og:image:height", imageHeight);

		lib.AddMeta("twitter:card", imgUrl != "" && !post.ImageSquare ? "summary_large_image" : "summary");
		lib.AddMeta("twitter:title", post.Title);
		lib.AddMeta("twitter:description", teaser);
		lib.AddMeta("twitter:image", imgUrl);
	}
	
}

@if(post.IsPublished || Permissions.UserMayEditContent){
<div class="app-blog sc-element">
	@Edit.Toolbar(post, actions: "edit")
	<div class="app-blog-detail"> <!-- Add class: app-blog-small -->
		<div class="app-blog-detail-top">
			<div class="app-blog-person">
				<a href="@Link.To(parameters: "author=" + author.FullName)">
					<img src="@author.Image.ToLower()?w=64&amp;h=65&amp;mode=crop&amp;scale=both" alt="@author.FullName" />
					<h4>@author.FullName</h4>
				</a>
			</div>
			<h1>@post.Title</h1>
			<time pubdate datetime="@post.PublicationMoment.ToString("d")">@post.PublicationMoment.ToString("d")</time>
		</div>
		@if(!String.IsNullOrEmpty(post.Image)){
			<img class="app-blog-image @(post.ImageSquare ? " pull-right" : "") " src="@imgUrl" alt="" />
		}
		<div class="app-blog-text">
			@Html.Raw(post.Body)
		</div>
		<div class="app-blog-text sc-content-block-list" @Edit.ContextAttributes(post, field: "DesignedContent")>
			@foreach(var cb in @post.DesignedContent) {
				@cb.Render();
			}
		</div>
	</div>
	
	<div class="app-blog-tags">
		<hr />
		<h3>Tags</h3>
		<ul>
			@foreach(var tag in post.Tags) {
				<li class="app-blog-tag1"><a href="@Link.To(parameters: "tag=" + tag.Tag)" title="@tag.Name">@tag.Name</a></li>
			}
		</ul>
	</div>
	<hr />

	<div class="app-blog-authordetails">
		<div>
			<img style="float: right; margin-left: 5px; width: 200px; height: 200px; border: none;" src='@author.Image'/> @Html.Raw(author.ShortBio)
		</div>
		<div>
		Read more posts by <a href="@Link.To(parameters: "author=" + author.FullName)">@author.FullName</a>
		</div>
	</div>
	<div class="app-blog-backlinks">
		<a class="app-blog-btn app-blog-back" href="@Link.To()" title="Home">Back to blog home </a>
	</div>
</div>
} else {
	Response.StatusCode = 404;
	Response.TrySkipIisCustomErrors = true;
	<h1>404 (not found)</h1>
	<p>
		<a href="/">Back to frontpage</a>
	</p>
}
