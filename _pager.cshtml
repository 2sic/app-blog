@using System.Linq

@* Paging Bar *@
@{
	// retrieve paging infos from the data-stream called "Paging"
    var pageInfo = AsDynamic(Data["Paging"]).First();
    int pageNumber = (int)pageInfo.PageNumber;
    int itemCount = (int)pageInfo.ItemCount;
    int pageSize = (int)pageInfo.PageSize;
    int pageCount = (int)Math.Floor((decimal)(itemCount + pageSize - 1) / pageSize);
}

@if (itemCount > pageSize)
{
<nav>
    <ul class="pagination">
        <li @Html.Raw(pageNumber < 2 ? "class='disabled'" : "")>
            <a href="@LinkToPageNumber(pageNumber - 1)" title="Zur&uuml;ck">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @for (var i = 0; i < pageCount; i++)
        {
            <li @Html.Raw(pageNumber == (i + 1) || (pageNumber == 0 && i == 0) ? "class='active'" : "")>
                <a href="@LinkToPageNumber(i + 1)">@(i + 1)</a>
            </li>
        }
        <li @Html.Raw(pageNumber == pageCount ? "class='disabled'" : "")>
            <a href="@LinkToPageNumber(pageNumber == 0 ? 2 : pageNumber + 1)" title="Weiter">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

}
@functions {
	// generate a paging-link number, preserving current tag/author parameters
    public string LinkToPageNumber(int pageNumber){
        string url = Link.To(parameters: 
            (!String.IsNullOrEmpty(Request.QueryString["tag"]) ? "tag=" + Request.QueryString["tag"] + "&" : "") 
            + (!String.IsNullOrEmpty(Request.QueryString["author"]) ? "author=" + Request.QueryString["author"] + "&" : "")
            + "page=" + pageNumber
            );
        return url.ToLower();
    }
}