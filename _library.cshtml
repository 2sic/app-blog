@using System.Dynamic
@using System.Text.RegularExpressions
@using System.Web.UI.HtmlControls

@functions {
	// this is a fairly complex workaround to deliver a anonymous type, because 
	// razor doesn't fully support anonymous types, so I must create an expando instead
	public dynamic unknownAuthor = ToExpando(new Dictionary<string, object>() 
		{
			{ "FullName", "Unknown" },
			{ "Image", "unknown.jpg" },
			{ "ShortBio", "bio unknown" }
		}); 
	
    // helper method
    public static dynamic ToExpando(Dictionary<string, object> anonymousDictionary)
    {
        IDictionary<string, object> expando = new ExpandoObject();
        foreach (var item in anonymousDictionary)
            expando.Add(item);
        return (ExpandoObject)expando;
    }
	
    
	// page variable for re-use
    private Page page = null;
    public void AddHeaderLine(string newHeader) {
        if(page == null)
            page = HttpContext.Current.Handler as Page;  
    	var genCon = new System.Web.UI.LiteralControl(newHeader);
        page.Header.Controls.Add(genCon);
    }
    public void AddMeta(string prop, string content) {
    	AddHeaderLine("<meta property='" + prop + "' content='" + content + "' /> ");
    }

    // return composed sized and sanitized image URL 
    public string GetSizedImgUrl(string imgUrl, string imageHeight, string imageWidth) {
        // skip this if currently in search-index mode without request object
        if(Request == null || String.IsNullOrEmpty(imgUrl)) 
            return imgUrl;

        if (String.IsNullOrEmpty(imgUrl)) throw new Exception("string is empty");
        imgUrl = Request.Url.Scheme + "://" + Request.Url.Host 
            + imgUrl.ToLower() 
                + "?w=" + imageWidth + "&amp;h=" + imageHeight 
                + "&amp;mode=max&amp;scale=both";
        imgUrl = Uri.EscapeUriString(imgUrl);
        return imgUrl;				
    }

    // determine and set meta description and meta title
    public void SetMetaAndTitle(string title, string titleFallback, string meta, string metaFallback){
        var pageHandler = HttpContext.Current.Handler as Page;
        meta = String.IsNullOrEmpty(meta) ? meta : metaFallback;

		((DotNetNuke.Framework.CDefault)pageHandler).Description = meta;
		var metaTag = (HtmlMeta)pageHandler.FindControl("metaDescription");
		metaTag.Visible = true;
		metaTag.Content = HttpUtility.HtmlAttributeEncode(meta);

		pageHandler.Title = String.IsNullOrEmpty(title) ? title : titleFallback;	
    }

    // strip html from original content
    public string StripHtml(string original){
            var sanitizedText = Regex.Replace(original, "<[^>]*>", " ", RegexOptions.IgnoreCase).Trim();
            sanitizedText = Regex.Replace(sanitizedText, "\\s+", " ");
            return sanitizedText;     
    }

    // populate and generate open graph headers
    public void SetOpenGraphHeaders(string title, string siteName, string url, string teaser, string imgUrl, bool isSquare, string imgHeight, string imgWidth){
        AddMeta("og:type", "article");
		AddMeta("og:title", title);
		AddMeta("og:site_name", siteName);
		AddMeta("og:url", url);
		AddMeta("og:description", teaser);
	    AddMeta("og:image", imgUrl);
        AddMeta("og:image:height", imgHeight);
        AddMeta("og:image:width", imgWidth);

		AddMeta("twitter:card", imgUrl != "" && !isSquare ? "summary_large_image" : "summary");
		AddMeta("twitter:title", title);
		AddMeta("twitter:description", teaser);
		AddMeta("twitter:image", imgUrl);
    }
}