@inherits Custom.Hybrid.Razor12
@{
  /** Part List Paging - Show a pager (if activated) **/

  // Paging information is provided by the Query in the "Paging" stream
  var pagingInfo = AsDynamic(Data["Paging"].FirstOrDefault());
  int current = (int)pagingInfo.PageNumber;
  int max = (int)pagingInfo.PageCount;

  // Stop here if we dont' have pages to show
  if (max <= 1) {  return; }

  // Prepare basic checks
  var enablePrev = current > 1;
  var enableNext = current < max;
}
<nav>
  <ul class="pagination justify-content-center">
    @* Show previous button *@
    <li class='page-item @(enablePrev ? "" : "disabled")' aria-hidden="true">
      <a class="page-link" href='@LinkToPage(current - 1, enablePrev)'>@Resources.PagePrevious</a>
    </li>

    @* Show button for every page *@
    @for (int i = 1; i <= max; i++) {
      <li class='page-item @(i == current ? "active" : "")'>
        <a class="page-link" href='@LinkToPage(i)'>@i</a>
      </li>
    }

    @* Show next button *@
    <li class='page-item @(enableNext ? "" : "disabled")' aria-hidden="true">
      <a class="page-link" href='@LinkToPage(current + 1, enableNext)'>@Resources.PageNext</a>
    </li>
  </ul>
</nav>

@functions {
  // TODO: 2dm - fix using latest CmsContext.Page.Parameters methods


  /// <summary>
  /// Generate a paging-link, preserving current filter parameters
  /// </summary>
  public dynamic LinkToPage(int pageNumber, bool enabled = true) {
    // If not enabled we must make sure we don't generate links for Google which shouldn't exist
    // For example next-buttons going to pages which is past the last page
    if (!enabled) {
      return Link.To();
    }

    // Create page=X parameter
    // Note: We should never have a page=1 parameter, otherwise two different links exist for page 1
    var pageParam = pageNumber == 1 ? "" : "page=" + pageNumber;
    return Link.To(parameters: PreservedUrlParams + pageParam);
  }

  /// <summary>
  /// Get parameters from the URL which should be re-used in paging links
  /// This preserves existing filters
  /// </summary>
  private string PreservedUrlParams {
    get {
      // Use previous if this was already accessed before
      if (_preservedParams != null) { return _preservedParams; }

      // Assemble relevant url filtering parameters
      var urlParams = CmsContext.Page.Parameters;
      var filteredTag = urlParams["Tag"];
      var filteredAuthor = urlParams["Author"];
      var filteredCategory = urlParams["Category"];

      var categoryParam = filteredCategory == null ? "" : "category=" + filteredCategory + "&";
      var tagParam = filteredTag == null ? "" : "tag=" + filteredTag + "&";
      var authorParam = filteredAuthor == null ? "" : "author=" + filteredAuthor + "&";

      return _preservedParams = categoryParam + tagParam + authorParam;
    }
  }
  private string _preservedParams;
}